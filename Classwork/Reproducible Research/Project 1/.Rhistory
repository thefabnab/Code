rm(a,b)
clear
clr
4 > x
x > 5
4 > x
4 < x
4 = x
x = 4
clr
(clr)
demo()
install.packages(c("manipulate", "mgcv"))
print(i)
i <- 0
print(x[i])
x
print(x)
source('~/.active-rstudio-document')
x
}
}
}
}
x + y
source('~/.active-rstudio-document')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
z <- 10
f(3)
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install.packages(c("int64","reshape2"))
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL)
install.packages("Desktop/InterOpMetrics/R/InterOpMetrics.R",repos=NULL)
?repos
?install.packages
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL)
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL, type=SOURCE)
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL, type=source)
install.packages("~/Desktop/InterOpMetrics_0.0.5.tar.gz", repos = NULL, type = "source")
install.packages(c("int64","reshape2"))
install.packages("~/Desktop/int64_1.1.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/InterOpMetrics_0.0.5.tar.gz", repos = NULL, type = "source")
library("InterOpMetrics", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setInterOpFolder("Desktop/Work/Google Drive//Code//Work//SAV Project//InterOp")
loadMetrics()
install.packages(c("codetools", "manipulate", "Matrix"))
?writeMetrics
writeMetrics(writeDir = "Desktop/", )
x <- matrix(1:30, 6, 5)
View(x)
View(x)
apply(x,1,sum)
apply(x,2,sum)
lapply(x,sum)
?apply
library(datasets)
data(iris)
?iris
iris
?lapply
lapply(iris[,1], mean)
iris
?colmean
?col
?colsum
?Colsum
?colsums
?colMeans
colMeans(Iris[,1])
colMeans(Iris)
apply(Iris, 1, mean)
colMeans(iris)
apply(iris, 1, mean)
iris$mean
View(iris)
colSums(iris)
colSums(iris[,1])
colSums(iris[1,1])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 -82.63636
debug(ls)
ls
ls()
debug(ls)
ls()
library(datasets)
data(iris)
iris
tapply(iris$virginica, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$virginica, mean)
tapply(iris$Sepal.Length, iris$virginica,)
tapply(iris$Sepal.Length, iris$virginica, sum)
mean(irisSepal.L[irisSpecies=='virginica'])
mean(irisSepal.Length[irisSpecies=='virginica'])
?mean
mean(iris$Sepal.Length[irisSpecies=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(iris$Sepal.Length[$Species=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(a$virginica$Sepal.Length)
mean(iris$virginica$Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x>0]
x[c(x[3], x[5], x[7])]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
vect2
names(vect2) <-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix( 1:20, nrow = 4, ncol = 5)
matrix(1:20, 4,5)
matrix( data = 1:20, nrow = 4, ncol = 5)
infor()
info()
my_matrix2 <-matrix( data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
?dim
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
install.packages("RMySQL")
#Producing a tidy execution dataset from DeathPenaltyInfo.org
#Producing a tidy execution dataset from DeathPenaltyInfo.org
library(data.table)
library(plyr)
library(gcookbook)
#Downloading dataset
download.file("http://www.deathpenaltyinfo.org/exec-xls-export",
"execution_data.csv", method = "curl" )
#Reading and setting to data frame
exec <- read.csv("execution_data.csv")
exec <- data.table(exec)
#Utalize setkey to sort data by Race to view incomplete cases
#For some reason complete.cases didn't showup the actual empty cases in the data
setkey(exec, Race)
#Exclude the first 36 incomplete observations
tidy_exec <- exec[37:1438]
#export tidy exec
write.csv(tidy_exec, file = "tidy_execution.csv")
#Parsed through Date column to produce a year column
year_exec <- mutate(tidy_exec, Year = years(tidy_exec$Date))
#Generated a stacked bar plot demonstrating executions as a function of race
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) +
geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
labs(title = "Executions by Race 1977-2015",x = "Year", y = "Executions") +
coord_cartesian(ylim = c(0, 100))
#Saved plot in WD
ggsave("Execution_by_race.png")
f
library(ggplot2)
library(grid)
str(mpg)
summary(mpg)
?str
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = manufacturer)
qplot(displ, hwy, data = mpg, color = fl)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = cty)
qplot(displ, hwy, data = mpg, color = year)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = cyl)
qplot(displ, hwy, data = mpg, geome = c("point", "smooth"))
qplot(hwy, data = mpg, geome = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, geome = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
xyplot(Ozone ~ Wind, data = airquality)
library(lattice)
xyplot(Ozone ~ Wind, data = airquality)
type(xyplot(Ozone ~ Wind, data = airquality))
g <- xyplot(Ozone ~ Wind, data = airquality)
str(g)
summary(g)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattuce
?lattice
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?lattice
?par()
?spolom()
?splom()
?trellis.par.set()
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?geom
?geom()
library(ggplot2)
?geom
?ggplot2
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating)) + geom()
print(g)
g
?ggplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating)) + geom_point()
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
?text()
?lpoints()
?lines()
?barplot
x <- 4 + 4
help(barplot)
plot(x = y)
plot(x +1)
setwd("Desktop/Work/Google Drive//School Work//Exploratory Data Analysis//Project 1")
install.packages("sweave")
install.packages("knitr")
install.packages(c("jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime"))
install.packages("kernlab")
ls()
q()
setwd("Desktop/Work/Google_Drive/School Work/Reproducible Research/Project 1/")
data <- read.csv("activity.csv")
data
head(data)
?head()
head(data, 50)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
head(data, 20)
?sum()
sum(data, na.rm = TRUE)
sum(data[date], na.rm = TRUE)
sum(data[,2], na.rm = TRUE)
sum(data[,3], na.rm = TRUE)
sum(data[,1], na.rm = TRUE)
sum(data[,1] ~ data[,2], na.rm = TRUE)
sum(data[,1], na.rm = TRUE)
sum(data[,1], na.rm = TRUE)
factor(data)
factor(data[,2])
?factor()
factor(data[,2], levels)
factor(data[,2], levels = *)
levels(data[,2])
table(data)
View(table(data))
data2 = factor(data)
?data.table
?data.csv
?data.table()
?data.csv()
data2 <- data.frame(data)
data2
levels(data2)
levels(data2[,2])
factor(data2)
?aggregate()
aggregate(data2)
levels(data2[,2])
agg <- aggregate(x = data2, by = levels(data[,2], FUN = "sum"))
agg <- aggregate(x = data2, by = levels(data[,2], FUN = sum))
agg <- aggregate(x = data2, by = levels(data[,2], FUN = mean))
agg <- aggregate(x = data2, by = levels(data[,2]))
agg <- aggregate(x = data2, by = levels(data[,2]), FUN = mean)
agg <- aggregate(steps ~ date, data, sum)
agg
hist(agg)
?hist
hist(agg$steps)
?hist()
library(ggplot2)
?ghist
?qhist()
geom_histogram(agg)
geom_histogram(data = agg)
geom_histogram(data = agg, aes(agg[,1], agg[,2]))
ggplot(agg)
View(agg)
View(agg)
ggplot(agg, aes(date, steps))
ggplot(agg, aes(x = date, y = steps)) + geom_histogram()
ggplot(agg, aes(x = date, y = steps)) + geom_histogram()
ggplot(agg, aes(x = date, y = steps))
ggplot(agg, aes(x = date, y = steps)) + geom_histogram(colour = "green")
ggplot(agg, aes(steps)) + geom_histogram(colour = "green")
ggplot(agg, aes(x = date, y = steps)) + geom_bar(colour = "green")
ggplot(data2, aes(factor(date)) + geom_bar(colour = "green")
)
ggplot(data2, aes(factor(date),steps) + geom_bar(colour = "green")
)
ggplot(data2, aes(x =factor(date),y =steps) + geom_bar(colour = "green"))
ggplot(data2, aes(x =as.numeric(factor(date)),y =steps) + geom_bar(colour = "green"))
ggplot(data2, aes(factor(date),steps) + geom_bar(colour = "green")
)
ggplot(agg, aes(x = date, y = steps)) + geom_histogram()
ggplot(agg, aes(steps)) + geom_histogram()
ggplot(agg, aes(steps)) + geom_histogram(colour = "blue")
ggplot(agg, aes(steps)) + geom_histogram(colour = "blue", fill = "green")
ggplot(agg, aes(steps)) + geom_histogram(colour = "blue", fill = "green") + labs( x = "Number of steps per day", y = "Frequency of times per day" )
#just a quick write up of the process
library(knitr)
data <- read.csv("activity.csv")
agg <- aggregate(steps ~ date, data, sum)
ggplot(agg, aes(steps)) + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
Mean_steps <- mean()
?mean()
Mean_steps <- mean(agg$steps)
Mean_steps
Mean_steps <- mean(agg$steps, na.rm = TRUE)
Mean_steps
Median_steps <- median(agg$steps, na.rm = TRUE)
Median_steps
head(data2)
agg <- aggregate(steps ~ date, data, sum)
agg
agg <- aggregate(interval ~ date, data, mean)
agg
agg <- aggregate(steps ~ interval, data, mean)
agg
agg <- aggregate(steps ~ interval, data, mean, na.rm = TRUE)
agg
ggplot(agg, aes(steps)) + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = interval, y = steps)) + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = interval, y = steps), state = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = interval, y = steps), stat = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = interval), stat = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
head(agg)
agg <- aggregate(interval ~ steps, data, mean, na.rm = TRUE)
head(agg)
ggplot(agg, aes(x = interval), stat = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
agg <- aggregate(steps ~ interval, data, mean, na.rm = TRUE)
agg2 <- aggregate(data2$steps,
by = list(interval = data2$interval),
FUN=mean, na.rm=TRUE)
head(agg2)
?aggregate()
levels(agg$interval)
level(agg$interval)
list(agg$interval)
want <- list(agg$interval)
agg <- aggregate(steps ~ want, data, mean, na.rm = TRUE)
agg <- aggregate(agg$steps, by = list(agg$interval), FUN = mean, na.rm = TRUE)
head(agg)
ggplot(agg, aes(x = interval), stat = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = interval), stat = "identity") + geom_histogram(colour = "blue", fill = "green") +
labs( x = "Number of steps per day", y = "Frequency of times per day" )
ggplot(agg, aes(x = x))
ggplot(agg, aes(x = x)) + geom_histogram()
head(agg)
head(agg2)
hist(agg2)
hist(agg)
ggplot(agg, aes(x)) + geom_histogram()
ggplot(agg, aes(interval)) + geom_histogram()
ggplot(agg, aes(interval)) + geom_histogram()
head(agg)
ggplot(agg, aes(Group.1)) + geom_histogram()
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(agg, aes(x=Group.1, y=x)) +
geom_histogram(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number
of steps")
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps")
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps")
agg <- aggregate(steps ~ date, data, sum)
agg <- aggregate(agg$steps, by = list(agg$interval), FUN = mean, na.rm = TRUE)
agg <- aggregate(steps ~ date, data, sum, na.rm = TRUE)
agg <- aggregate(agg$steps, by = list(agg$interval), FUN = mean, na.rm = TRUE)
agg <- aggregate(data$steps, by = list(data$interval), FUN = mean, na.rm = TRUE)
ggplot(agg, aes(x=Group.1, y=x)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps")
?max()
max(agg[,2])
head(agg)
?cbind()
max(agg[,2])
agg[,2.06.1698]
?which.max()
agg[which.max(max(agg[,2]))]
head(agg)
max(agg[,2])
which.max(agg[])
steps_per_interval[which.max(
agg$x),]
agg[which.max(
agg$x),]
agg[which.max(agg$x),]
agg[206.1]
agg[which.max(agg$x),]
which.max(agg$x)
agg[which.max(agg$x),]
