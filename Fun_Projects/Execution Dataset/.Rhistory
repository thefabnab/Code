q()
demo()
recursion
a = seq(from=1, to=100, by=1)
b = seq(from=1, to=100, by=1)
plot(a,b)
rm(a,b)
clear
clr
4 > x
x > 5
4 > x
4 < x
4 = x
x = 4
clr
(clr)
demo()
install.packages(c("manipulate", "mgcv"))
print(i)
i <- 0
print(x[i])
x
print(x)
source('~/.active-rstudio-document')
x
}
}
}
}
x + y
source('~/.active-rstudio-document')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
z <- 10
f(3)
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install.packages(c("int64","reshape2"))
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL)
install.packages("Desktop/InterOpMetrics/R/InterOpMetrics.R",repos=NULL)
?repos
?install.packages
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL)
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL, type=SOURCE)
install.packages("Desktop/InterOpMetrics_0.0.5.tar.gz",repos=NULL, type=source)
install.packages("~/Desktop/InterOpMetrics_0.0.5.tar.gz", repos = NULL, type = "source")
install.packages(c("int64","reshape2"))
install.packages("~/Desktop/int64_1.1.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/InterOpMetrics_0.0.5.tar.gz", repos = NULL, type = "source")
library("InterOpMetrics", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setInterOpFolder("Desktop/Work/Google Drive//Code//Work//SAV Project//InterOp")
loadMetrics()
install.packages(c("codetools", "manipulate", "Matrix"))
?writeMetrics
writeMetrics(writeDir = "Desktop/", )
x <- matrix(1:30, 6, 5)
View(x)
View(x)
apply(x,1,sum)
apply(x,2,sum)
lapply(x,sum)
?apply
library(datasets)
data(iris)
?iris
iris
?lapply
lapply(iris[,1], mean)
iris
?colmean
?col
?colsum
?Colsum
?colsums
?colMeans
colMeans(Iris[,1])
colMeans(Iris)
apply(Iris, 1, mean)
colMeans(iris)
apply(iris, 1, mean)
iris$mean
View(iris)
colSums(iris)
colSums(iris[,1])
colSums(iris[1,1])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 -82.63636
debug(ls)
ls
ls()
debug(ls)
ls()
library(datasets)
data(iris)
iris
tapply(iris$virginica, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$virginica, mean)
tapply(iris$Sepal.Length, iris$virginica,)
tapply(iris$Sepal.Length, iris$virginica, sum)
mean(irisSepal.L[irisSpecies=='virginica'])
mean(irisSepal.Length[irisSpecies=='virginica'])
?mean
mean(iris$Sepal.Length[irisSpecies=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(iris$Sepal.Length[$Species=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(a$virginica$Sepal.Length)
mean(iris$virginica$Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x>0]
x[c(x[3], x[5], x[7])]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
vect2
names(vect2) <-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix( 1:20, nrow = 4, ncol = 5)
matrix(1:20, 4,5)
matrix( data = 1:20, nrow = 4, ncol = 5)
infor()
info()
my_matrix2 <-matrix( data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
?dim
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
install.packages("RMySQL")
install.packages(c("ggplot2", "gcookbook"))
library(ggplot2)
?ggplot2
setwd("Desktop/Work/Google Drive//Code//Work//Execution Dataset/")
execution <- read.csv("execution_database.csv")
View(execution)
View(execution)
install.package("gdata")
install.packages("gdata")
plot(mtcars$wt, mtcars$mpg)
library(ggplot2)
qplot(mtcars$wt, mtcars$mpg)
qplot(execution$Date, execution$Age)
qplot(execution$Race, execution$Age)
plot(pressure$temperature, pressure$pressure, type="l")
install.packages("kml")
?kml
?plotkml
install.packages("plotkml")
?plotkml
plot(pressure$temperature, pressure$pressure, type="l")
points(pressure$temperature, pressure$pressure)
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="red")
?lines
View(execution)
qplot(execution$County, execution$Race)
qplot(execution$Age, execution$Race)
?qplot
plot(pressure$temperature, pressure$pressure, type="l")
points(pressure$temperature, pressure$pressure/2, col="red")
lines(pressure$temperature, pressure$pressure/2, col="red")
barplot(BOD$demand, names.arg=BOD$Time)
qplot(BOD$Time, BOD$demand, geom="bar", stat="identity")
qplot(execution$Race, geom="bar", stat="identity")
qplot(execution$Race, execution$age, geom="bar", stat="identity")
qplot(execution$Race, execution$Age, geom="bar", stat="identity")
table(mtcars$cyl)table(execution$State)
table(mtcars$cyl)table(execution)
table(mtcars$cyl)
table(execution$Race)
is.na(execution)
execution1 <- execution[complete.cases(execution),]
table(execution1$Race)
?read.csv
execution <- data.table(execution1)
library(data.table)
execution <- data.table(execution1)
execution
str(execution)
summary(execution)
summary <- summary(execution)
View(summary)
execution <- execution[complete.cases(execution),]
execution
execution2 <- execution[complete.cases(execution),]
?data.table
table(execution)
table(execution$Race)
x <- complete.cases(execution)
x
x <- na.omit(execution)
execution[1400:]
execution[1400:1430]
?complete.cases
complete.cases(execution[1400:1430])
!complete.cases(execution[1400:1430])
x <-sort(execution$Date)
View(x)
x <-sort(execution$Date,)
View(x)
?data.table
execution[2]
execution[,Race]
setkey(execution, Race)
setkey(execution, "Race")
setkey(execution, Race)
View(execution)
y <- data.table(execution[37:1438])
View(y)
table(y$Race)
plot(y$Race, y$Aage)
plot(y$Race, y$Age)
View(y)
?export
?save
?write.table
write.csv(y,file = "sample.csv")
exec <- read.csv("tidy_execution.csv")
View(exec)
sort
?sort
exec <- data.table(exec)
?attach
?require
?download.file
getwd()
download.file("http://www.deathpenaltyinfo.org/exec-xls-export", "execution_data.csv" method = "curl" )
download.file("http://www.deathpenaltyinfo.org/exec-xls-export", "execution_data.csv" method = curl )
download.file("http://www.deathpenaltyinfo.org/exec-xls-export", "execution_data.csv", method = "curl" )
exec <- read.csv("execution_data.csv")
View(exec)
library(data.table)
exec <- data.table(exec)
setkey(exec, Race)
View(exec)
View(exec)
tidy_exec <- exec[37:1438]
?run
#Producing a tidy execution dataset from DeathPenaltyInfo.org
library(data.table)
#Downloading dataset
download.file("http://www.deathpenaltyinfo.org/exec-xls-export",
"execution_data.csv", method = "curl" )
#Reading and setting to data frame
exec <- read.csv("execution_data.csv")
exec <- data.table(exec)
#Utalize setkey to sort data by Race to view incomplete cases
#For some reason complete.cases didn't showup the actual empty cases in the data
setkey(exec, Race)
#Exclude the first 36 incomplete observations
tidy_exec <- exec[37:1438]
#export tidy exec
write.csv(tidy_exec, file = "tidy_execution.csv")
View(tidy_exec)
head(tidy_exec)
library(pylr)
library(plyr)
?pylr
?plyr
?cron
?chron
dts <- dates(c("02/27/92", "02/27/92", "01/14/92",
"02/28/92", "02/01/92"))
library("chron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dts <- dates(c("02/27/92", "02/27/92", "01/14/92",
"02/28/92", "02/01/92"))
dts
months(dts)
years(dts)
years(tidy_exec$Date)
sort(tidy_exec$Dates)
sort(tidy_exec$Date)
years(tidy_exec$Date)
plot(years(tidy_exec$Date), tidy_exec$Race)
qplot(years(tidy_exec$Date), tidy_exec$Race)
qplot(years(tidy_exec$Date), tidy_exec$Race[Asian])
table(tidy_exec$Race)
qplot(years(tidy_exec$Date), tidy_exec$Race[Asian])
qplot(years(tidy_exec$Date), tidy_exec$Race)
plot(years(tidy_exec$Date), tidy_exec$Race)
?gcookbook
library("gcookbook", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?gcookbook
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
ggplot2(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
library(gcookbook)
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
climate
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(stat="identity") + guides(fill=guide_legend(reverse=TRUE))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar, order=desc(Cultivar))) +    geom_bar(stat="identity")
ggplot(tidy_exec)
?ggplot
?aes
?plyr
View(airquality)
mutate(airquality, Azone = Ozone/2)
View(airquality)
stand <- mutate(airquality, Azone = Ozone/2)
View(stand)
year_exec <- mutate(tidy_exec, Year = year(tidy_exec$Date))
year_exec <- mutate(tidy_exec, Year = year(Date))
year(tidy_exec$Date)
year(exec$Date)
year(01/02/1999)
year("01/02/1999")
?year
year_exec <- mutate(tidy_exec, Year = years(tidy_exec$Date))
View(year_exec)
qplot(year_exec$Year, year_exec$Race)
plot(year_exec$Year, year_exec$Race)
?geom_bar
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity")
?ggplot
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +    geom_bar(stat="identity") +    guides(fill=guide_legend(reverse=TRUE))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(stat="identity", colour="black")
ggplot(year_exec, aes(x=Year, y=Race, fill=Cultivar)) + geom_bar(stat="identity", colour="black")
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity", colour="black")
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity", colour="cut")
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity")
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity", colour="green")
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity", colour=cut)
ggplot(year_exec, aes(x=Year, y=Executions, fill = Race)) + geom_bar(stat="identity", colour=cut)
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity", colour=cut)
ggplot(year_exec, aes(x=Year, y=Race)) + geom_bar(stat="identity")
?geom_bar
?colour
k <- ggplot(mtcars, aes(factor(cyl), fill = factor(vs)))
k + geom_bar()
View(mtcars)
?factor
ggplot(year_exec, aes(x=Year, fill = Race)) + geom_bar(stat="identity")
ggplot(year_exec, aes(x=Year, fill = Race)) + geom_bar(stat="identity", colour = cut)
ggplot(year_exec, aes(x=Year, fill = Race)) + geom_bar()
ggplot(year_exec, aes(x=Year, fill = Race)) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
ggplot(year_exec, aes(x=Year, fill = Race, order = -Race)) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
ggplot(year_exec, aes(x=Year, fill = Race, order = REVERSE)) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
ggplot(year_exec, aes(x=Year, fill = Race)) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
levels(year_exec$Race)
ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
plot
jpeg("Execution_By_Race.jpg")
ggsave("Execution_by_race.png")
?ggsave
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + labs(x = "Age in years", y = "Height in inches")
plot
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + labs(x = "Year", y = "Executions") + title(main = "Executions by Race 1977-2015")
plot
?labs
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + labs(title = "Executions 1977-2015",x = "Year", y = "Executions")
plot
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) + geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + labs(title = "Executions 1977-2015",x = "Year", y = "Executions") + coord_cartesian(ylim = c(0, 100))
plot
#Producing a tidy execution dataset from DeathPenaltyInfo.org
library(data.table)
library(plyr)
library(gcookbook)
#Downloading dataset
download.file("http://www.deathpenaltyinfo.org/exec-xls-export",
"execution_data.csv", method = "curl" )
#Reading and setting to data frame
exec <- read.csv("execution_data.csv")
exec <- data.table(exec)
#Utalize setkey to sort data by Race to view incomplete cases
#For some reason complete.cases didn't showup the actual empty cases in the data
setkey(exec, Race)
#Exclude the first 36 incomplete observations
tidy_exec <- exec[37:1438]
#export tidy exec
write.csv(tidy_exec, file = "tidy_execution.csv")
#Parsed through Date column to produce a year column
year_exec <- mutate(tidy_exec, Year = years(tidy_exec$Date))
#Generated a stacked bar plot demonstrating executions as a function of race
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) +
geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
labs(title = "Executions by Race 1977-2015",x = "Year", y = "Executions") +
coord_cartesian(ylim = c(0, 100))
#Saved plot in WD
ggsave("Execution_by_race.png")
